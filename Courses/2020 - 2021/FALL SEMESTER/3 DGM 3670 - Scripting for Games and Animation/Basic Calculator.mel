//Add Array of Numbers together

global proc float Addition(float $InputValues[])
{
		float $AddEquals = $InputValues[0];
		
		for ( $i = 0; $i < size($InputValues); $i++)
		{
			$AddEquals += $InputValues[$i];
		}
		
		return $AddEquals;
}

//Subtract Array of Numbers Apart

global proc float Subtraction(float $InputValues[])
{
		float $SubEquals = $InputValues[0];
		
		for ( $i = 1; $i < size($InputValues); $i++)
		{
			$SubEquals -= $InputValues[$i];
		}
		
		return $SubEquals;
}

//Multiply Array of Numbers Together

global proc float Multiplication(float $InputValues[])
{
		float $MultEquals = $InputValues[0];
		
		for ( $i = 0; $i < size($InputValues); $i++)
		{
			$MultEquals *= $InputValues[$i];
		}
		
		return $MultEquals;
}

//Divide Array of Numbers Apart

global proc float Division(float $InputValues[])
{
		float $DivEquals = $InputValues[0];
		
		for ( $i = 1; $i < size($InputValues); $i++)
		{
			$DivEquals /= $InputValues[$i];
		}
		
		return $DivEquals;
}

//Raise number to power of Number)

global proc float Power(float $BaseFloat, float $InputValues)
{
	float $PowEquals = $BaseFloat;
	
	for ($i = 1; $i < $InputValues; $i++)
	{
		$PowEquals *= $BaseFloat;
	}
	return $PowEquals;	
}

//Average of sum of floats

global proc float Mean(float $InputValues[])
{
	float $FloatsEquals = $InputValues[0];
	
	for ($i = 1; $i < size($InputValues); ++$i)
	{
		$FloatsEquals += $InputValues[$i];
	}
	
	$FloatsEquals /= size($InputValues);
	
	return $FloatsEquals;
}

//Find median of array
	
global proc float Median(float $InputValues[])
{
	float $SortedFloats[] = `sort $InputValues`;

	float $MedianEquals;
	
	if (size($SortedFloats) % 2 == 1)
	{
		$MedianEquals = $SortedFloats[size($InputValues) / 2];
	}
	else
	{
		$MedianEquals = ($SortedFloats[(size($InputValues) + 1) / 2] + $SortedFloats[(size($InputValues) - 1) / 2]);
	}
	
	return $MedianEquals;
}

//Find Mode of array

global proc float Mode(float $InputValues[])
{
	float $ModeEquals = $InputValues[0];
	
	int $CountFloatFrequency = 0;
	
	int $HighestFloatFrequency = 0;
	
	for($i = 0; $i < size($InputValues); ++$i)
	{
		$CountFloatFrequency = 0;
		
		for ($CheckCurrentFloat = $i; $CheckCurrentFloat < size($InputValues); ++$CheckCurrentFloat)
		{
			if ($InputValues[$i] == $InputValues[$CheckCurrentFloat])
			{
				$CountFloatFrequency++;
				
				if ($CountFloatFrequency >= $HighestFloatFrequency)
				{
					$HighestFloatFrequency = $CountFloatFrequency;
					$ModeEquals = $InputValues[$i];
				}								
			}
		}
		
		return $ModeEquals;
	}
}

//Full Calculator

global proc float Calculator(float $InputValues[], string $CalculateThis)
{
	
	float $OutputValue = 0;
	
	//Calculate Add
	if ($CalculateThis == "+")
	{
		$OutputValue = Addition($InputValues);
		print ("\nThe Addition Function Equals " + $OutputValue);
	}
	
	//Calculate Subtract
	if ($CalculateThis == "-")
	{
		$OutputValue = Subtraction($InputValues);
		print ("\nThe Subtraction Function Equals " + $OutputValue);
	}
	
	//Calculate Multiply
		if ($CalculateThis == "*")
	{
		$OutputValue = Multiplication($InputValues);
		print ("\nThe Multiplication Function Equals " + $OutputValue);
	}
	
	//Calculate Diivide
		if ($CalculateThis == "/")
	{
		$OutputValue = Division($InputValues);
		print ("\nThe Division Function Equals " + $OutputValue);
	}
	
	//Calculate Power
		if ($CalculateThis == "^")
	{
		$OutputValue = Power($InputValues[0] , $InputValues[1]);
		print ("\nThe Power Function Equals " + $OutputValue);
	}
	
	//Calculate Mean
		if ($CalculateThis == "M")
	{
		$OutputValue = Mean($InputValues);
		print ("\nThe Mean Function Equals " + $OutputValue);
	}
	
	//Calculate Median
	if ($CalculateThis == "V")
	{
		$OutputValue = Median($InputValues);
		print ("\nThe Median Function Equals " + $OutputValue);
	}
	
	//Calculate Mode
		if ($CalculateThis == ">")
	{
		$OutputValue = Mode($InputValues);
		print ("\nThe Mode Function Equals " + $OutputValue);
	}
	
	return $OutputValue;

}

Calculator({1,5,2,8,13,1,3}, "+");